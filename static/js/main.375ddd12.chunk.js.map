{"version":3,"sources":["logo.svg","components/Header.js","components/Contents.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Contents","useState","confirmedData","setConfirmedData","quarantinedData","setQuarantinedData","comparedData","setComparedData","useEffect","fetchEvents","a","axios","get","res","makeData","data","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","death","Deaths","recovered","Recovered","findItem","find","push","labels","map","datasets","label","backgroundColor","fill","borderColor","last","length","options","legend","display","positon","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.375ddd12.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>\r\n                COVID-19\r\n           </h1>\r\n            <select>\r\n                <option>국내</option>\r\n                <option>세계</option>\r\n            </select>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { Bar, Doughnut, Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n\r\nconst Contents = () => {\r\n\r\n    const [confirmedData, setConfirmedData] = useState({})\r\n    const [quarantinedData, setQuarantinedData] = useState({})\r\n    const [comparedData, setComparedData] = useState({})\r\n\r\n    // async랑 await를 쓰지 않으면 다 불러와지기 전에 변수에 담겨서 consol에 찍힘. 그래서 이 두 개를 써주는 것.\r\n    useEffect(() => {\r\n        const fetchEvents = async () => {\r\n            const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\");\r\n            // makeData를 return\r\n            makeData(res.data)\r\n        }\r\n\r\n        // 위에서 넘어온 makeData를 items라는 프로퍼티에 넣음.\r\n        const makeData = (items) => {\r\n            const arr = items.reduce((acc, cur) => {\r\n                const currentDate = new Date(cur.Date);\r\n                const year = currentDate.getFullYear();\r\n                const month = currentDate.getMonth();\r\n                const date = currentDate.getDate();\r\n                const confirmed = cur.Confirmed;\r\n                const active = cur.Active;\r\n                const death = cur.Deaths;\r\n                const recovered = cur.Recovered;\r\n\r\n                const findItem = acc.find(a => a.year === year && a.month === month);\r\n\r\n                if (!findItem) {\r\n                    acc.push({\r\n                        // key와 value가 같으면 생략 가능! year, month 이런 식으로\r\n                        year: year,\r\n                        month: month,\r\n                        date: date,\r\n                        confirmed: confirmed,\r\n                        active: active,\r\n                        death: death,\r\n                        recovered: recovered\r\n                    })\r\n                    if (findItem && findItem.date < date) {\r\n                        findItem.active = active;\r\n                        findItem.death = death;\r\n                        findItem.date = date;\r\n                        findItem.year = year;\r\n                        findItem.month = month;\r\n                        findItem.recovered = recovered;\r\n                        findItem.confirmed = confirmed;\r\n                    }\r\n                }\r\n\r\n                return acc;\r\n            }, [])\r\n\r\n            const labels = arr.map(a => `${a.month + 1}월`);\r\n            // state를 업데이트. OBJ 형태로 업데이트를 시킴\r\n            setConfirmedData({\r\n                // 이것도 key와 value가 같으니까 생략 가능.\r\n                labels: labels,\r\n                datasets: [\r\n                    {\r\n                        label: \"국내 누적 확진자\",\r\n                        backgroundColor: \"salmon\",\r\n                        fill: true,\r\n                        data: arr.map(a => a.confirmed) // 이것도 arrow function처럼 {}랑 return 생략한 거!\r\n                    },\r\n                ]\r\n            });\r\n\r\n            setQuarantinedData({\r\n                // 이것도 key와 value가 같으니까 생략 가능. 이건 생략한 버전\r\n                labels,\r\n                datasets: [\r\n                    {\r\n                        label: \"월별 격리자 현황\",\r\n                        borderColor: \"salmon\",\r\n                        fill: false,\r\n                        data: arr.map(a => a.active) // 이것도 arrow function처럼 {}랑 return 생략한 거!\r\n                    },\r\n                ]\r\n            });\r\n\r\n            const last = arr[arr.length - 1]\r\n            setComparedData({\r\n                // 이것도 key와 value가 같으니까 생략 가능. 이건 생략한 버전\r\n                labels: [\"확진자\", \"격리 해제\", \"사망\"],\r\n                datasets: [\r\n                    {\r\n                        label: \"누적 확진, 해제, 사망 비율\",\r\n                        backgroundColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n                        borderColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n                        fill: false,\r\n                        data: [last.confirmed, last.recovered, last.death]\r\n                    },\r\n                ]\r\n            });\r\n\r\n        }\r\n\r\n        fetchEvents();\r\n    }, []) // 두 번째에 배열을 선언해야 계속적으로 요청하는 걸 방지함.\r\n\r\n    return (\r\n        <div>\r\n            <section>\r\n                <h2>국내 코로나 현황</h2>\r\n                <div className=\"contents\">\r\n                    <div>\r\n                        <Bar data={confirmedData} options={\r\n                            { title: { display: true, text: \"누적 확진자 추이\", fontSize: 16 } },\r\n                            { legend: { display: true, positon: \"bottom\" } }\r\n                        } />\r\n\r\n                        <Line data={quarantinedData} options={\r\n                            { title: { display: true, text: \"월별 격리자 현황\", fontSize: 16 } },\r\n                            { legend: { display: true, positon: \"bottom\" } }\r\n                        } />\r\n\r\n                        <Doughnut data={comparedData} options={\r\n                            { title: { display: true, text: `누적 확진, 해제, 사망 (${new Date().getMonth() + 1}월)`, fontSize: 16 } },\r\n                            { legend: { display: true, positon: \"bottom\" } }\r\n                        } />\r\n\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Contents;","import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport Contents from './components/Contents';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Contents />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}